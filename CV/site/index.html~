<!-- index.html -->
    <!DOCTYPE html>
    <html>
    <head>
      <meta http-equiv="content-type" content="text/html; charset=UTF-8">
      <meta charset="utf-8">
      <title>crahul</title>
      <meta name="viewport" content="width=device-width, initial-scale=1.0">
      <meta name="description" content="">
      <meta name="author" content="bit_sapien">

      <!-- SCROLLS -->
      <!-- load bootstrap and fontawesome via CDN -->
      <link rel="stylesheet" href="//netdna.bootstrapcdn.com/bootstrap/3.0.0/css/bootstrap.min.css" />
      <link rel="stylesheet" href="//maxcdn.bootstrapcdn.com/font-awesome/4.3.0/css/font-awesome.min.css">
      <link rel="stylesheet" href="style.css" />

      <!-- SPELLS -->
      <!-- load angular and angular route via CDN -->
      <script src="https://ajax.googleapis.com/ajax/libs/angularjs/1.2.25/angular.js"></script>
      <script src="http://cdnjs.cloudflare.com/ajax/libs/angular.js/1.2.25/angular-animate.js"></script>
      <script src="//ajax.googleapis.com/ajax/libs/angularjs/1.2.25/angular-route.js"></script>
      <script src="script.js"></script>
    </head>
    <body ng-controller="mainController">
	<!--
	BEGIN: App-Loading Screen.
	-- 
	Until the AngularJS application code is loaded and bootstrapped, this is just
	"static HTML." Meaning, the [class-based] directive, "mAppLoading", won't
	actually do anything until the application is initialized. As such, we'll give
	it just enough CSS to "fail open"; then, when the AngularJS app loads, the
	directive will run and we'll remove this loading screen.
	NOTES ON ANIMATION:
	When the AngularJS application is loaded and starts bootstrapping, all
	animations are disabled until all the routing information and templating
	information is loaded AND at least two digests have run (in order to prevent
	a flurry of animation activity). As such, we can't animate the root of the
	directive. Instead, we have to add "ngAnimateChildren" to the root element
	and then animate the inner container. The "ngAnimateChildren" directive allows
	us to override the animation-blocking within the bounds of our directive, which
	is fine since it only runs once.
	-->
	<div class="m-app-loading" ng-animate-children>
	 
	<!--
	HACKY CODE WARNING: I'm putting Style block inside directive so that it
	will be removed from the DOM when we remove the directive container.
	-->
	<style type="text/css">
	@import url(http://fonts.googleapis.com/css?family=Open+Sans:300);
	div.m-app-loading {
	position: fixed ;

	}
	div.m-app-loading div.animated-container {
	background-color: #EEE ;
	bottom: 0px ;
	left: 0px ;
	opacity: 1.0 ;
	position: fixed ;
	right: 0px ;
	top: 0px ;
	z-index: 999999 ;
	}
	/* Used to initialize the ng-leave animation state. */
	div.m-app-loading div.animated-container.ng-leave {
	opacity: 1.0 ;
	transition: all ease-in 1s ;
	-webkit-transition: all ease-in 1s ;
	}
	/* Used to set the end properties of the ng-leave animation state. */
	div.m-app-loading div.animated-container.ng-leave-active {
	opacity: 0 ;
	margin-left:-100vh;
	}
	div.m-app-loading div.messaging {
	color: #222 ;
	font-family: 'Open Sans', sans-serif;
	left: 0px ;
	margin-top: -37px ;
	position: absolute ;
	right: 0px ;
	text-align: center;
	top: 50% ;
	}
	div.m-app-loading h1 {
	font-size: 106px ;
	line-height: 35px ;
	color:#333;
	margin: 0px 0px 50px 0px ;
	}
	div.m-app-loading p {
	font-size: 18px ;
	line-height: 14px ;
	margin: 0px 0px 0px 0px ;
	}

	</style>
	 
	 
	<!-- BEGIN: Actual animated container. -->
	<div class="animated-container">
	 
	<div class="messaging">

	<h1>
	ðŸ˜œ
	</h1>
	<p> Sobering up. Be patient.</p>
	</div>
	 
	</div>
	<!-- END: Actual animated container. -->
	 
	</div>
	<!-- END: App-Loading Screen. -->
	  

        <!-- MAIN CONTENT AND INJECTED VIEWS -->
        <div id="main">
	 
            <!-- angular templating -->
            <!-- this is where content will be injected -->
	    <div ng-view></div>
        </div>

    </body>
    </html>

